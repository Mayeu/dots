#! /usr/bin/env bash
#set -e
set -u

echo "👥 Create a group for me, myslef, and I"
MY_GROUP=me_myself_and_i
# -q = no interaction
# -o = operation to do
# -a = record to add
# -t = type of the record
sudo dseditgroup -q -o create "$MY_GROUP"
sudo dseditgroup -o edit -a m -t user "$MY_GROUP"
sudo dseditgroup -o edit -a cast -t user "$MY_GROUP"

# Setup the configuration share
SETTING_SHARE="/Volumes/Shared Settings"
echo "⚒  Give read/write access to me, myself, and I to the setting share"
sudo chown -R m:"$MY_GROUP" "$SETTING_SHARE"
sudo chmod -R +a "group:${MY_GROUP} allow list,add_file,search,add_subdirectory,delete_child,readattr,writeattr,readextattr,writeextattr,readsecurity,file_inherit,directory_inherit" "$SETTING_SHARE"

#/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
echo "👁  Turn off homebrew analytics"
brew analytics off
export HOMEBREW_NO_ANALYTICS=1

echo "🍺 Configure Homebrew to be shared with me, myself, and I"
sudo chmod -R +a "group:${MY_GROUP} allow list,add_file,search,add_subdirectory,delete_child,readattr,writeattr,readextattr,writeextattr,readsecurity,file_inherit,directory_inherit" /usr/local/*
sudo chgrp -R "$MY_GROUP" "/usr/local/"
sudo chmod -R g+rwX "/usr/local/"

echo "🍺 Install Cask apps"
brew cask install    \
  iterm2             \
  firefox            \
  omnifocus          \
  blockblock         \
  carbon-copy-cloner \
  little-snitch      \
  syncthing-app      \
  alfred             \
  keka               \
  macpass \
  osxfuse \
  karabiner-elements \
  signal \
  flux \
  borgbackup \
  evernote \
  keybase \
  daisydisk \
  docker \
  dash \
  patchwork \
  spotify \
  calibre \
  virtualbox \
  virtualbox-extension-pack \
  vagrant \
  appcleaner \
  zoomus \
  tor-browser \
  superduper \
  gpg-suite \
  transmission \
  transmission-remote-gui \
  protonvpn \
  vagrant-manager \
  now \
  libreoffice \
  steam \
  vlc \
  setapp \
  imageoptim \
  xld \
  chromium \
  mattermost \
  owncloud \
  tunnelblick \
  handbrake \
  resilio-sync \
  programmer-dvorak \
  java \
  mailmate \
  nightowl \
  kobo \
  font-firacode-nerd-font \
  minikube \
  homebrew/cask-drivers/logitech-options \
  google-cloud-sdk \
  darktable \
  google-chrome \
  gitup \
  postman \
  openinterminal \
  macvim \
  beaker-browser \
  brave-browser \
  contexts \
  notion \
  mumble \
  sublime-merge \
  flotato \
  anki \
  go64 \
  timeular \
  force-paste \
  chrysalis \
  arduino \
  nextcloud

  #ocenaudio \

echo "🍺 Install cli apps"
brew install      \
  git             \
  git-extras      \
  bash            \
  zsh             \
  fish            \
  wget            \
  curl            \
  node            \
  nvm             \
  pass \
  gopass \
  sshfs \
  vagrant-completion \
  terraform \
  terragrunt \
  nomad \
  autojump \
  ext4fuse \
  rsync \
  ripgrep \
  ansible \
  homebrew/cask-fonts/font-fira-code \
  sshrc \
  elixir \
  bat \
  selecta \
  terminal-notifier \
  jq \
  forego \
  yarn \
  imageoptim-cli \
  weboob \
  youtube-dl \
  ffmpeg \
  tmux \
  htop \
  shellcheck \
  watch \
  gnu-getopt \
  mysql-client \
  yamllint \
  getantibody/tap/antibody \
  mayeu/tap/borgmatic \
  mayeu/tap/beancount \
  mayeu/tap/beancount-scripts \
  mayeu/tap/fava \
  mayeu/tap/run-one \
  mayeu/tap/flock \
  mayeu/tap/habitica-cli \
  mayeu/tap/lmt \
  signal-cli \
  imagemagick \
  parallel \
  elm \
  elm-format \
  pandoc \
  neovim \
  make \
  ctags \
  python@2 \
  rancher-cli \
  rancher-compose \
  kubectl \
  pwgen \
  kubernetes-helm \
  vault \
  docker-machine-driver-hyperkit \
  pinentry-mac \
  pgcli \
  hugo \
  atomicparsley `# Pour embedded les images dans les m4a de youtube-dl` \
  upx `# executable compressor` \
  bats `# bash testing` \
  pv \
  fortune \
  hardlink-osx \
  packer \
  ruby \
  shfmt \
  xmlstarlet \
  libnettle \
  tor \
  postgresql \
  sloccount \
  ipfs \
  asciinema \
  the_silver_searcher \
  swaks \
  gitlab-runner \
  telnet \
  fswatch \
  azure-cli \
  tealdeer \
  adr-tools \
  rmlint \
  gawk \
  pigz \
  bindfs \
  zsh-completion \
  netlify-cli \
  CleverCloud/homebrew-tap/clever-tools

gem install --force bundler

# Splitline comments: https://stackoverflow.com/a/12797512/1423984

## To use pinentry-mac it must be added as "pinentry-program" in the
# `~/.gnupg/gpg-agent.conf` configuration

## This is to give root right to the hyperkit driver of docker
echo "🐳 Give some root right to the hyperkit docker driver"
sudo chown root:wheel /usr/local/opt/docker-machine-driver-hyperkit/bin/docker-machine-driver-hyperkit
sudo chmod u+s /usr/local/opt/docker-machine-driver-hyperkit/bin/docker-machine-driver-hyperkit

# Install / upgrade python support for neovim
# No need to pass any flag during the compilation or install
echo "🐍 Install python deps for nvim"
pip2 install --user --upgrade pynvim
pip3 install --user --upgrade pynvim

# Force link some gnu tools
#brew link --force gnu-getopt

# SSHpass
brew install http://git.io/sshpass.rb

# You will need to add:
#    #{HOMEBREW_PREFIX}/bin/fish
# to /etc/shells.
# Then run:
#    chsh -s #{HOMEBREW_PREFIX}/bin/fish
# to make fish your default shell.

cd ~/ && git clone https://github.com/Mayeu/dots .dots

# Make sure dvp is my login keyboard
echo "⌨️  Update my login keyboard"
sudo cp ~/Library/Preferences/com.apple.HIToolbox.plist /Library/Preferences/

## Install a fish package manager
## Install bass https://github.com/edc/bass
## Configure nvm to use bass
## Check awesome fish https://github.com/jorgebucaran/awesome-fish-shell
## Check awesome cli app https://github.com/agarrharr/awesome-cli-apps#macos

# Setup my dots
echo "🔗 Link my dotfiles"
make link

# Setup my shell to be homebrew zsh
echo "🐚 Setup my shell to homebrew zsh"
export zshpath="$(brew --prefix)/bin/zsh"
grep -q "^${zshpath}" /etc/shells || sudo -E sh -c "echo '$zshpath' >> /etc/shells"
chsh -s "$zshpath"

# setup ZSH
echo "🐚 Setup zsh"
# Force rebuilding of autocompletion
rm -f ~/.zcompdump; compinit

# Setup VIM
echo "✅ Setup VIM package manager"
curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > /tmp/installer.sh
sh /tmp/installer.sh ~/.cache/dein

# iterm2 configuration
echo "🐚 Configure iterm2 to sync preferences"
# Use a custom folder for the preferences
defaults write com.googlecode.iterm2 PrefsCustomFolder "/Volumes/Shared Settings/iterm2"
# Load preferences from a custom folder
defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder 1
# Save config on the custom folder when quitting
defaults write com.googlecode.iterm2 "NoSyncNeverRemindPrefsChangesLostForFile_selection" 0

# Alfred Configuration
echo "🤵 Configure Alfred to share settings"
# Use a sync folder
defaults write com.runningwithcrayons.Alfred-Preferences syncfolder "/Volumes/Shared Settings/alfred"

# MailMate configuration
echo "📧 Configure mailmate"
defaults write com.freron.MailMate MmAutomaticallyExpandThreadsEnabled -bool YES
defaults write com.freron.MailMate MmAutomaticallyExpandOnlyWhenCounted -bool YES

# The first one makes MailMate always expand all threads. Combined with the
# second one, only threads with emails “counted” are expanded. That might seem
# strange, but it means that if you have a mailbox with an unread count in the
# mailbox list then only threads with unread messages are going to be expanded
# (or the parts of the threads with unread messages). New messages also trigger
# auto-expansion. (Note: It might be changed how this works. In particular,
# these features could be more independent of each other.)

echo "🔍 Activate the locate database"
sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
